/*        Â·NIVELL-1Â·   

         -Exercici-1
*/
// Operador ternari bÃ sic: 

// Escriu una funciÃ³ potConduir que accepti l'edat com a parÃ metre 
// i utilitzi l'operador ternari per determinar si l'usuari pot conduir.
// Si l'edat Ã©s 18 o mÃ©s, ha de retornar 'Pots conduir'. 
// Si no, ha de retornar 'No pots conduir'.


const potConduir = (edat) => {
    return edat >= 18 ? 'Pots conduir!' : 'NO POTS CONDUIR!!!';
};
const edatUsuarie = 17;
console.log(potConduir(edatUsuarie));



/*       -Exercici.2  
*/
// Ãšs amb operadors de comparaciÃ³:

// Escriu una expressiÃ³ que utilitzi l'operador ternari per determinar
// quin dels dos nombres donats (num1 i num2) Ã©s mÃ©s gran.
// Si num1 Ã©s mÃ©s gran, retorna 'num1 Ã©s mÃ©s gran'.
// Si no, retorna 'num2 Ã©s mÃ©s gran'.


const num1 = 10;
const num2 = 8;

const mesGran = num1 >  num2 ? 'num1 Ã©s mÃ©s gran! ðŸ˜Œ' : 'num2 Ã©s mÃ©s gran! ðŸ˜Œ';

console.log(mesGran);



/*        Â·NIVELL-2Â·   

         -Exercici.3  
*/

// Ãšs enllaÃ§at d'operadors ternaris: 

// Escriu una expressiÃ³ que utilitzi enllaÃ§os d'operadors ternaris per determinar si un nÃºmero Ã©s positiu, negatiu o zero.

// Operador ternari amb funcions: 

// Crea una funciÃ³ trobarMaxim que accepti tres parÃ metres (a, b, c) i utilitzi l'operador ternari per determinar el valor mÃ xim.


const trobarMaxim = (a, b, c) => {
    const maxim = a > b ? (a > c ? a : c) : (b > c ? b : c);
    return maxim;
};

const resultat = trobarMaxim(10, 5, 8);
console.log(resultat);



/*        Â·NIVELL-3Â·   

         -Exercici-4
*/

// Operador ternari dins un bucle:

// Escriu una funciÃ³ parOImpar que accepti un array de nÃºmeros i utilitzi un bucle per a recÃ³rrer l'array.
// Dins del bucle, utilitza l'operador ternari per a determinar si cada nÃºmero Ã©s parell o imparell.

const parOImpar = (numeros) => {
    for (let i = 0; i < numeros.length; i++) {
        const resultat = numeros[i] % 2 === 0 ? 'Parell!' : 'Imparell!';
        console.log(`${numeros[i]} Ã©s ${resultat}`);
    }
};

const arrayNumeros = [2, 5, 8, 11, 14, 17, 21,];
parOImpar(arrayNumeros);